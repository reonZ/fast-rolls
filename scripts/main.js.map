{
  "version": 3,
  "sources": ["../src/dice.js", "../src/module.js", "../src/chat.js", "../src/main.js"],
  "sourcesContent": ["const ROLL_REGEX =\r\n\t/^\\/(?:r|roll|publicroll|pr|gmroll|grm|blindroll|broll|br|selfroll|sr) (.+)/i;\r\nconst INLINE_REGEX = /\\[\\[([\\dd+ -]+)\\]\\]$/i;\r\n\r\nexport const dice = [\"d4\", \"d6\", \"d8\", \"d10\", \"d12\", \"d20\", \"d100\"];\r\n\r\nexport async function processDie(event) {\r\n\tconst die = event.currentTarget.dataset.die;\r\n\r\n\tif (!event.shiftKey) {\r\n\t\trollDie(die, event.ctrlKey);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst chat = ui.chat.element.find(\"#chat-message\");\r\n\tconst str = chat.val().trim();\r\n\r\n\tif (!str) {\r\n\t\tchat.val(`/r 1${die}`);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (ROLL_REGEX.test(str)) {\r\n\t\tchat.val(processChatRoll(die, str));\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst match = str.match(INLINE_REGEX);\r\n\tif (!match) {\r\n\t\tchat.val(str + ` [[1${die}]]`);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst index = match.index;\r\n\tconst sub = str.substring(index + 2, str.length - 2).trim();\r\n\tconst newStr = `${str.substring(0, index)}[[${processChatRoll(die, sub)}]]`;\r\n\tchat.val(newStr);\r\n}\r\n\r\nfunction processChatRoll(die, str) {\r\n\tconst DIE_REGEX = new RegExp(`(?<!- *)(\\\\d+)${die}`, \"i\");\r\n\tconst match = str.match(DIE_REGEX);\r\n\r\n\tif (!match) return str + ` + 1${die}`;\r\n\r\n\tconst index = match.index;\r\n\tconst value = Number(match[1]);\r\n\r\n\treturn str.substring(0, index) + (value + 1) + str.substring(index + 1);\r\n}\r\n\r\nasync function rollDie(die, ctrlKey) {\r\n\tconst RollClass =\r\n\t\tgame.system.id === \"pf2e\"\r\n\t\t\t? CONFIG.Dice.rolls.find((x) => x.name === \"DamageRoll\")\r\n\t\t\t: Roll;\r\n\r\n\tconst roll = new RollClass(`1${die}`);\r\n\r\n\tconst rollMode = ctrlKey\r\n\t\t? CONST.DICE_ROLL_MODES.BLIND\r\n\t\t: CONST.DICE_ROLL_MODES.PUBLIC;\r\n\r\n\tawait roll.evaluate({ async: true });\r\n\r\n\troll.toMessage({}, { rollMode });\r\n}\r\n", "export const MODULE_ID = \"fast-rolls\";\r\n\r\nexport function templatePath(...path) {\r\n\tconst pathStr = path.filter((x) => typeof x === \"string\").join(\"/\");\r\n\treturn `modules/${MODULE_ID}/templates/${pathStr}.hbs`;\r\n}\r\n\r\nexport function imagePath(...path) {\r\n\tconst pathStr = path.filter((x) => typeof x === \"string\").join(\"/\");\r\n\treturn `modules/${MODULE_ID}/images/${pathStr}.webp`;\r\n}\r\n\r\nexport function getSetting(setting) {\r\n\treturn game.settings.get(MODULE_ID, setting);\r\n}\r\n", "import { dice, processDie } from \"./dice.js\";\r\nimport { getSetting, imagePath, templatePath } from \"./module.js\";\r\n\r\nexport async function renderChatLog(chatLog, html) {\r\n\tawait injectDice(html);\r\n\taddListeners(html);\r\n}\r\n\r\nasync function injectDice(html) {\r\n\tconst data = {\r\n\t\tlight: getSetting(\"light\"),\r\n\t\tdice: dice.map((x) => ({ type: x, img: imagePath(x) })),\r\n\t};\r\n\r\n\tconst template = await renderTemplate(templatePath(\"dice\"), data);\r\n\thtml.find(\"#chat-form\").after(template);\r\n}\r\n\r\nfunction addListeners(html) {\r\n\thtml.find(\"#fast-rolls-chat-dice .fast-rolls-die\").on(\"click\", processDie);\r\n}\r\n", "import { renderChatLog } from \"./chat.js\";\r\nimport { MODULE_ID } from \"./module.js\";\r\n\r\nHooks.on(\"setup\", () => {\r\n\tgame.settings.register(MODULE_ID, \"light\", {\r\n\t\tname: \"Light Dice\",\r\n\t\ttype: Boolean,\r\n\t\tdefault: false,\r\n\t\tconfig: true,\r\n\t\tscope: \"client\",\r\n\t\tonChange: (value) => {\r\n\t\t\tui.chat.element.find(\"#fast-rolls-chat-dice\").toggleClass(\"light\", value);\r\n\t\t},\r\n\t});\r\n});\r\n\r\nHooks.on(\"renderChatLog\", renderChatLog);\r\n"],
  "mappings": "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",
  "names": ["ROLL_REGEX", "INLINE_REGEX", "dice", "processDie", "event", "die", "rollDie", "chat", "str", "processChatRoll", "match", "index", "sub", "newStr", "__name", "DIE_REGEX", "value", "ctrlKey", "RollClass", "x", "roll", "rollMode", "MODULE_ID", "templatePath", "path", "pathStr", "x", "__name", "imagePath", "getSetting", "setting", "renderChatLog", "chatLog", "html", "injectDice", "addListeners", "__name", "data", "getSetting", "dice", "x", "imagePath", "template", "templatePath", "processDie", "MODULE_ID", "value", "renderChatLog"]
}
